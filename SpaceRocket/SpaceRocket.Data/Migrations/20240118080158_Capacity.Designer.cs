// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SpaseRocket.Data;

#nullable disable

namespace SpaceRocket.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240118080158_Capacity")]
    partial class Capacity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdatet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Thrust")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserCreated")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdated")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.ToTable("Engine");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Fuel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdatet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserCreated")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdated")
                        .HasColumnType("uuid");

                    b.Property<double>("WeightPerCubicMeter")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.HeadModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CrewCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdatet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserCreated")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdated")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("HeadModule");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Rocket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdatet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FuelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HeadModuleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TankId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserCreated")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdated")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("FuelId");

                    b.HasIndex("HeadModuleId");

                    b.HasIndex("TankId");

                    b.ToTable("Rocket");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Tank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdatet")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserCreated")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserUpdated")
                        .HasColumnType("uuid");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Tank");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Engine", b =>
                {
                    b.HasOne("SpaceRocket.Data.Entitys.Fuel", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("SpaceRocket.Data.Entitys.Rocket", b =>
                {
                    b.HasOne("SpaceRocket.Data.Entitys.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceRocket.Data.Entitys.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceRocket.Data.Entitys.HeadModule", "HeadModule")
                        .WithMany()
                        .HasForeignKey("HeadModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceRocket.Data.Entitys.Tank", "Tank")
                        .WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("Fuel");

                    b.Navigation("HeadModule");

                    b.Navigation("Tank");
                });
#pragma warning restore 612, 618
        }
    }
}
